/*
 * File      : application.c
 * This file is part of RT-Thread RTOS
 * COPYRIGHT (C) 2006, RT-Thread Development Team
 *
 * The license and distribution terms for this file may be
 * found in the file LICENSE in this distribution or at
 * http://www.rt-thread.org/license/LICENSE
 *
 * Change Logs:
 * Date           Author       Notes
 * 2009-01-05     Bernard      the first version
 */

/**
 * @addtogroup STM32
 */
/*@{*/

#include "stm32f4xx.h"
#include <board.h>
#include <rtthread.h>
#include <components.h>

#ifdef RT_USING_FINSH
#include <finsh.h>
#endif

#ifdef RT_LWIP_PPP
#include <ppp.h>
#include <modem.h>
#endif /* RT_LWIP_PPP */

#ifdef RT_USING_LWIP
#include <lwip/sys.h>
#include <lwip/api.h>
#include <netif/ethernetif.h>
#endif

#include "httpclient.h"
#include <dfs_posix.h>

#include "can_cfg.h"
#include <dlfcn.h>
#include "record_manager.h"
#include "ccp_master.h"
#include "can_monitor.h"
#include "led_control.h"
#include "mcmess.h"

rt_module_t ConfigDllHandle = RT_NULL;
Record_ConfigType *pRecord_Config = RT_NULL;
CAN_ConfigType *pCAN1_Config = RT_NULL;
CAN_ConfigType *pCAN2_Config = RT_NULL;
McMessConfigData *pMcMess_Config = RT_NULL;


typedef Record_ConfigType * (*get_rec_cfg_fn)(void);
typedef CAN_ConfigType * (*get_can_cfg_fn)(int ch);
typedef McMessConfigData * (*get_mcmess_cfg_fn)(void);



extern void rt_platform_init(void);
extern rt_err_t modem_lisau2xx_init(void);


//struct http_client_session *session=RT_NULL;
//rt_uint32_t ok_count=0, fail_count=0;
//struct dfs_fd pfd;
	
void rt_init_thread_entry(void* parameter)
{
	rt_device_t dev_sd0;
    
#ifdef RT_USING_COMPONENTS_INIT
    /* initialization RT-Thread Components */
    rt_components_init();
#endif

    rt_platform_init();

#ifdef RT_USING_DFS	
/*
	if (dfs_mount("flash0", "/", "elm", 0, 0) == 0)
    {
        rt_kprintf("Mount FatFs file system to root, Done!\n");
    }
    else
    {
        rt_kprintf("Mount FatFs file system failed.\n");
    }
*/
#endif
	
	//dev_sd0 = rt_device_find("sd0");
	//if(dev_sd0 != RT_NULL)
	//{
	//	rt_kprintf("find sd0...\n");
	//	rt_device_init(dev_sd0);
	//	rt_thread_delay(20);
	//}
	//else
	//{
	//	rt_kprintf("not find sd0...\n");
	//}
	//printf("%f\n", 3.14);//error, 编译链接无措，下载后串口不输出调试信息，死机
	//rt_kprintf("%f\n", 3.14);
	//rt_kprintf("%s\n", s);
	//sprintf(s, "%f", 3.1415926);
	//rt_kprintf("%s\n", s);
	
	#ifdef RT_USING_RS9110
    // Wifi 
    {
        extern rt_err_t rs9110_wifi_hw_init(const char* spi_device, char* name);
        extern rt_err_t wifi_begin(void);
		extern rt_err_t adhoc_creator_test(void);
		
        rs9110_wifi_hw_init("spi20", "e0");
        wifi_begin();
		//adhoc_creator_test();
//		rt_kprintf("RS9110 init done\n");
    }
	
#if 0	//Only Ad-hoc creator mode enable
	{
		extern void dhcpd_start(void);
		dhcpd_start();
		rt_kprintf("DHCP server running\n");
	}
#endif
#endif  

    
/*
	while(1)
	{
		if( modem_is_start())
		{
			session = http_client_open("http://www.baidu.com");
			if(session == RT_NULL)
			{
				rt_kprintf("error...\n");
				fail_count++;			
			}
			else
			{
				http_client_close(session);
				rt_kprintf("ok...\n");
				ok_count++;			
			}	
		}
		else
		{
			rt_kprintf("modem is offline...\n");
		}
		
		rt_kprintf("fail_count=%d\n", fail_count);
		rt_kprintf("ok_count=%d\n", ok_count);	
	}	*/
	
   
#ifdef RT_USING_LWIP
    //statr telnet thread,网口代替串口，finish
/*    {
        extern void telnet_srv(void);   
        telnet_srv();
    }*/
#endif
 
			http_transfer_data_system_init();   //服务器HTTP传输数据系统初始化
}


int rt_application_init(void)
{
    rt_thread_t init_thread;

    init_thread = rt_thread_create("init",
                                   rt_init_thread_entry, RT_NULL,
                                   4096, 8, 20);
    if (init_thread != RT_NULL) rt_thread_startup(init_thread);
        

    return 0;
}

int rt_load_configruation(void)
{
	int ret = 0;
	/* TODO: Load the config.dll to */
	ConfigDllHandle = dlopen("/config.dll",RTLD_NOW);
	if (RT_NULL != ConfigDllHandle)
	{
		get_rec_cfg_fn get_rec_cfg = (get_rec_cfg_fn)dlsym(ConfigDllHandle, "GetRecConfig");
		if (RT_NULL != get_rec_cfg)
		{
			pRecord_Config = get_rec_cfg();
			if (RT_NULL != pRecord_Config)
			{
				record_manager_init(pRecord_Config);
				get_can_cfg_fn get_can_cfg = (get_can_cfg_fn)dlsym(ConfigDllHandle, "GetCanConfig");
				get_mcmess_cfg_fn get_mcmess_cfg = (get_mcmess_cfg_fn)dlsym(ConfigDllHandle, "GetMcMessConfig");
				pCAN1_Config = RT_NULL;
				pCAN2_Config = RT_NULL;
				pMcMess_Config = RT_NULL;
				if ((RT_NULL != get_can_cfg) || (RT_NULL != get_mcmess_cfg))
				{
					//SetLedStatus(sys, 1);//LED_Status.sys = 1;
					if (RT_NULL != get_can_cfg)
					{
						pCAN1_Config = get_can_cfg(1);
						pCAN2_Config = get_can_cfg(2);
					}
					if (RT_NULL != get_mcmess_cfg)
					{
						pMcMess_Config = get_mcmess_cfg();
					}
				}
				else
				{
					//SetLedStatus(sys, 2);//LED_Status.sys = 2;
					ret = -5;
				}
				
				if(RT_NULL != pCAN2_Config)
				{
					can_monitor_init(2, pCAN2_Config);
					if (pCAN2_Config->CCP_Master != RT_NULL)
					{
						rt_err_t ret = ccp_master_init(0, pCAN2_Config->CCP_Master);
						rt_kprintf("ccp_master_init(0, ...) return %d\n", ret);
					}
				}
				else
				{
					rt_kprintf("pCAN2_Config is NULL.\n");
				}
				if(RT_NULL != pCAN1_Config)
				{
					can_monitor_init(1, pCAN1_Config);
					if (pCAN1_Config->CCP_Master != RT_NULL)
					{
						rt_err_t ret = ccp_master_init(1, pCAN1_Config->CCP_Master);
						rt_kprintf("ccp_master_init(1, ...) return %d\n", ret);
					}
				}
				else
				{
					rt_kprintf("pCAN1_Config is NULL.\n");
				}
				if (RT_NULL != pMcMess_Config)
				{
					if (MCMESS_E_OK != McMessInit(pMcMess_Config))
					{
						rt_kprintf("McMessInit() fail.\n");
					}
				}
				else
				{
					rt_kprintf("pMcMess_Config is NULL.\n");
				}
			}
			else
			{
				//SetLedStatus(sys,2);//LED_Status.sys = 2;
				rt_kprintf("pRecord_Config is NULL.\n");
				ret = -3;
			}
		}
		else
		{
			//SetLedStatus(sys, 2);//LED_Status.sys = 2;
			pRecord_Config = RT_NULL;
			ret = -2;
		}
	}
	else
	{
		//SetLedStatus(sys, 2);//LED_Status.sys = 2;
		ret = -1;
	}
	return ret;
}
/*@}*/
